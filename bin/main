#!/usr/bin/env ruby
# rubocop:disable Style/GlobalVars, Metrics/PerceivedComplexity, Metrics/CyclomaticComplexity, Metrics/MethodLength
require 'colorize'
require_relative '../lib/board'
require_relative '../lib/win'

$exit = false

def user_input(count, player, board, winner)
  puts board.player?(player) ? 'Player 1 turn!'.bold.green : 'Player 2 turn!'.bold.yellow
  x = gets.chomp.to_i
  system 'clear'
  res = board.validating_input?(x)
  if res
    if player
      count = board.push(x - 1, 'X'.green, count)
      player1 = Win.new
      winner = board.who_won(1) if player1.win?(board.positions)
      puts 'Player 1 wins'.red if winner
    else
      count = board.push(x - 1, 'O'.yellow, count)
      player2 = Win.new
      winner = board.who_won(2) if player2.win?(board.positions)
      puts 'Player 2 wins'.red if winner
    end
    player = board.change_player?(player)
  elsif x.negative?
    $exit = true
  elsif board.positions[x - 1].eql?('X'.green) or board.positions[x - 1].eql?('O'.yellow)
    puts 'Position already taken please try another one!'.red
  else
    puts 'Wrong input'.red
  end
  [count, player, winner]
end

def start_game()
  count = 0
  player1 = true
  board = Board.new
  winner = false
  while !$exit and !winner and !count.eql? board.positions.size
    puts board.show_board
    p 'Choose position from [1-9]'
    count, player1, winner = user_input(count, player1, board, winner)
  end
  puts 'DRAW!'.green if count.eql? board.positions.size
end

start_game
# rubocop:enable Style/GlobalVars, Metrics/PerceivedComplexity, Metrics/CyclomaticComplexity, Metrics/MethodLength
