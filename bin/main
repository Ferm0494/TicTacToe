#!/usr/bin/env ruby
# rubocop:disable Style/GlobalVars, Metrics/PerceivedComplexity, Metrics/CyclomaticComplexity, Metrics/MethodLength
require 'colorize'
require_relative '../lib/board'
require_relative '../lib/win'

$exit = 0
$winner = 0
$player1 = true
$count = 0
$board = Board.new
$current_player = 1

def player()
  puts 'Choose position from [1-9]'
  if $player1
    puts 'Player1:'.blue
  else
    puts 'Player2:'.light_magenta
  end
end

def who_won(index)
  $winner = 1
  puts "Player #{index} wins".red
end

def user_input()
  player
  x = gets.chomp.to_i
  system 'clear'
  if x.is_a? Numeric and $board.positions.include? x
    if $player1 and $board.positions[x - 1].is_a?(Numeric)
      $count += 1
      $board.push(x - 1, 'X'.green)
      player1 = Win.new
      return who_won(1) if player1.win?

      $player1 = !$player1
    elsif $board.positions[x - 1].is_a?(Numeric)
      $count += 1
      $board.push(x - 1, 'O'.yellow)
      player2 = Win.new
      return who_won(2) if player2.win?

      $player1 = !$player1
    end
  elsif x.negative?
    $exit = 1
  elsif $board.positions[x - 1].eql?('X'.green) or $board.positions[x - 1].eql?('O'.yellow)
    puts 'Position already taken please try another one!'.red
  else
    puts 'Wrong input'.red
  end
end

def start_game()
  while $exit.eql? 0 and $winner.eql? 0 and !$count.eql? $board.positions.size
    puts $board.show_board
    user_input
  end
  puts 'DRAW!'.green if $count.eql? $board.positions.size and $winner.eql? 0
end

start_game
# rubocop:enable Style/GlobalVars, Metrics/PerceivedComplexity, Metrics/CyclomaticComplexity, Metrics/MethodLength
